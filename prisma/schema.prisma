datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
  model User {
    id            String          @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?         @unique
    emailVerified DateTime?
    image         String?
    role          String?
    memberID      String?         @unique
    phoneNumber   String?
    subscription  Subscription?
    lendBooks     LendBook[] @relation("UserLendBooks")
    purchasedBooks PurchsedBook[] @relation("UserPurchasedBooks")
    accounts      Account[]
    sessions      Session[]
    Authenticator Authenticator[]
  
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
  }

model Subscription {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  userId      String          @unique @db.ObjectId
  planType    PlanType        @default(NONE) // Enum for subscription type
  status      SubscriptionStatus @default(NO_SUBSCRIPTION) // Enum for subscription status
  startDate   DateTime        @default(now())
  endDate     DateTime?
  user        User            @relation(fields: [userId], references: [id])

  createdAt   DateTime        @default(now())
}

model LendBook {
  id          String   @id @default(auto()) @map("_id")  @db.ObjectId
  bookId      String 
  bookName    String   
  bookAuthor  String 
  bookIsbn    String
  lendDate    DateTime 
  lendDays    Int
  lendEndDate DateTime      
  userId      String   @db.ObjectId
  user        User     @relation("UserLendBooks", fields: [userId], references: [id])
}

model PurchsedBook {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  bookId      String
  bookName    String
  bookAuthor  String
  bookIsbn    String
  purchaseDate DateTime
  purchaseMethod String
  amount      Int
  user        User     @relation("UserPurchasedBooks", fields: [userId], references: [id])
}

enum PlanType {
  NONE
  BASIC
  ADVANCE
  PREMIUM
}

enum SubscriptionStatus {
  NO_SUBSCRIPTION
  ACTIVE
  INACTIVE
}

model Book{
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  ISBN        String   @unique
  BookName    String
  Author      String
  Description String
  Quantity    Int
  createdAt   DateTime @default(now())
}

 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([userId, credentialID])
}